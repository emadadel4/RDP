name: RDP

on:
  schedule:
    - cron: "45 * * * *"
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    steps:
      - name: Download Ngrok
        run: Invoke-WebRequest https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-windows-amd64.zip -OutFile ngrok.zip

      - name: Extract Ngrok
        run: Expand-Archive ngrok.zip

      - name: Authenticate Ngrok
        run: .\ngrok\ngrok.exe authtoken $Env:NGROK_AUTH_TOKEN
        env:
          NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}

      - name: Enable Remote Desktop
        run: |
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -name "fDenyTSConnections" -Value 0
          Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name "UserAuthentication" -Value 1

      - name: Set Admin Password
        run: Set-LocalUser -Name "runneradmin" -Password (ConvertTo-SecureString -AsPlainText "P@ssw0rd!" -Force)

      - name: Create Ngrok Tunnel and Notify Telegram
        run: |
          # Start Ngrok process
          Start-Process -FilePath .\ngrok\ngrok.exe -ArgumentList "tcp 3389" -NoNewWindow
          Start-Sleep -Seconds 1 # Allow Ngrok to start

          # Fetch the public Ngrok URL
          $ngrokUrl = Invoke-RestMethod -Uri http://localhost:4040/api/tunnels | 
                      Select-Object -ExpandProperty tunnels | 
                      Select-Object -First 1 | 
                      Select-Object -ExpandProperty public_url -ErrorAction SilentlyContinue

          # Retrieve secrets from environment
          $botToken = $Env:TELEGRAM_BOT_TOKEN
          $chatIds = $Env:TELEGRAM_CHAT_IDS -split "," | ForEach-Object { $_.Trim() }
          $uri = "https://api.telegram.org/bot$Env:TELEGRAM_BOT_TOKEN/sendDocument"
          
          # Prepare message details
          $urlWithoutProtocol = $ngrokUrl -replace "^tcp://", ""


          # Generate RDP file
            $RdpFilePath = "remote.rdp"
            $RdpContent = @"
            full address:s:$urlWithoutProtocol
            username:s:runneradmin
            prompt for credentials:i:0
            compression:i:1
            networkautodetect:i:0
            bandwidthautodetect:i:0
            connection type:i:1
            smart sizing:i:1
          "@
      
          $RdpFilePath = "$env:USERPROFILE\Desktop\BatmanCave_RDP.rdp"
          $RdpContent | Out-File -FilePath $RdpFilePath -Encoding UTF8


          # Send message to each chat_id
          foreach ($chatId in $chatIds) {
            $httpClient = New-Object System.Net.Http.HttpClient
            $formContent = New-Object System.Net.Http.MultipartFormDataContent
            $formContent.Add((New-Object System.Net.Http.StringContent($chatId)), "chat_id")
            $fileStream = [System.IO.File]::OpenRead($RdpFilePath)
            $fileContent = New-Object System.Net.Http.StreamContent($fileStream)
            $fileContent.Headers.Add("Content-Type", "application/octet-stream")
            $formContent.Add($fileContent, "document", [System.IO.Path]::GetFileName($RdpFilePath))
            $response = $httpClient.PostAsync($uri, $formContent).Result
            $httpClient.Dispose()
          }

          # Keep Ngrok running
          Write-Host "Ngrok is running. Press Ctrl+C to exit."
          while ($true) { Start-Sleep -Seconds 10 }
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_IDS: ${{ secrets.TELEGRAM_CHAT_ID }}