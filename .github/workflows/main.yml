name: CI

on:
  schedule:
    - cron: "45 * * * *"
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    steps:
    - name: Download ngrok
      run: Invoke-WebRequest https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-windows-amd64.zip -OutFile ngrok.zip
    - name: Extract ngrok
      run: Expand-Archive -Path ngrok.zip -DestinationPath .
    - name: Authenticate ngrok
      run: .\ngrok.exe authtoken $Env:NGROK_AUTH_TOKEN
      env:
        NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}
    - name: Enable Remote Desktop
      run: |
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0
        Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 1
        Set-LocalUser -Name "runneradmin" -Password (ConvertTo-SecureString -AsPlainText "P@ssw0rd!" -Force)
    - name: Start ngrok and Send RDP File
      run: |
        Start-Process -FilePath .\ngrok.exe -ArgumentList "tcp 3389" -NoNewWindow
        Start-Sleep -Seconds 5

        # Fetch ngrok public URL
        $ngrokApi = "http://localhost:4040/api/tunnels"
        $ngrokResponse = Invoke-RestMethod -Uri $ngrokApi -ErrorAction SilentlyContinue
        if (-not $ngrokResponse) {
          Write-Error "Failed to fetch ngrok public URL. Ensure ngrok is running."
          exit 1
        }

        $ngrokUrl = $ngrokResponse.tunnels[0].public_url -replace "^tcp://", ""

        # Generate RDP file
        $RdpFilePath = "remote.rdp"
        $RdpContent = @"
full address:s:$ngrokUrl
username:s:runneradmin
prompt for credentials:i:0
compression:i:1
networkautodetect:i:0
bandwidthautodetect:i:0
connection type:i:1
smart sizing:i:1
"@
        $RdpContent | Out-File -FilePath $RdpFilePath -Encoding UTF8

        # Send RDP file to Telegram
        $chatIds = $Env:TELEGRAM_CHAT_IDS -split "," | ForEach-Object { $_.Trim() }
        $uri = "https://api.telegram.org/bot$Env:TELEGRAM_BOT_TOKEN/sendDocument"

        foreach ($chatId in $chatIds) {
            $httpClient = New-Object System.Net.Http.HttpClient
            $formContent = New-Object System.Net.Http.MultipartFormDataContent
            $formContent.Add((New-Object System.Net.Http.StringContent($chatId)), "chat_id")
            $fileStream = [System.IO.File]::OpenRead($RdpFilePath)
            $fileContent = New-Object System.Net.Http.StreamContent($fileStream)
            $fileContent.Headers.Add("Content-Type", "application/octet-stream")
            $formContent.Add($fileContent, "document", [System.IO.Path]::GetFileName($RdpFilePath))

            $response = $httpClient.PostAsync($uri, $formContent).Result
            $httpClient.Dispose()
        }

        Write-Host "Ngrok is running. Press Ctrl+C to exit."
        while ($true) { Start-Sleep -Seconds 10 }
      env:
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        TELEGRAM_CHAT_IDS: ${{ secrets.TELEGRAM_CHAT_IDS }}
