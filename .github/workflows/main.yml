name: RDP

on:
  schedule:
    - cron: "45 * * * *"
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    steps:
    - name: Download
      run: Invoke-WebRequest https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-windows-amd64.zip -OutFile ngrok.zip
    - name: Extract
      run: Expand-Archive ngrok.zip
    - name: Auth
      run: .\ngrok\ngrok.exe authtoken $Env:NGROK_AUTH_TOKEN
      env:
        NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}
    - name: Enable TS
      run: Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server'-name "fDenyTSConnections" -Value 0
    - run: Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
    - run: Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name "UserAuthentication" -Value 1
    - run: Set-LocalUser -Name "runneradmin" -Password (ConvertTo-SecureString -AsPlainText "P@ssw0rd!" -Force)
    - name: Create Tunnel
      run: |
        Start-Process -FilePath .\ngrok\ngrok.exe -ArgumentList "tcp 3389" -NoNewWindow
        Start-Sleep -Seconds 1 # Allow ngrok to start

        # Fetch the public ngrok URL
        $ngrokUrl = Invoke-RestMethod -Uri http://localhost:4040/api/tunnels | 
                    Select-Object -ExpandProperty tunnels | 
                    Select-Object -First 1 | 
                    Select-Object -ExpandProperty public_url -ErrorAction SilentlyContinue

        # Retrieve secrets from environment
        $botToken = $Env:TELEGRAM_BOT_TOKEN
        $chatId = $Env:TELEGRAM_CHAT_ID

        $urlWithoutProtocol = $ngrokUrl -replace "^tcp://", ""
        $UrlPort = $urlWithoutProtocol.Split(":")[-1]
        $urlWithoutPort = $urlWithoutProtocol -replace ":\d+$", ""
        $message = "
        $urlWithoutPort
        $UrlPort
        "

        # Get list of active RDP sessions
        $rdpSessions = query user | Select-String "Active" | ForEach-Object { $_.Line.Split(" ", [System.StringSplitOptions]::RemoveEmptyEntries)[0] }
        if ($rdpSessions) {
          $message += "`nActive RDP Sessions:`n$($rdpSessions -join "`n")"
        } else {
          $message += "`nNo active RDP sessions found."
        }

        # Send the ngrok URL and active session list to Telegram

        foreach ($chatId in $chatIds) {

          Invoke-RestMethod -Uri "https://api.telegram.org/bot$botToken/sendMessage" `
            -Method Post `
            -ContentType "application/json" `
            -Body (@{chat_id=$chatId; text=$message} | ConvertTo-Json)
        }

        # Keep ngrok running
        Write-Host "Ngrok is running. Press Ctrl+C to exit."
        while ($true) { Start-Sleep -Seconds 10 }
      env:
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}