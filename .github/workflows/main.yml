name: CI

on:
  schedule:
    - cron: "45 * * * *"
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    steps:
    - name: Download
      run: Invoke-WebRequest https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-windows-amd64.zip -OutFile ngrok.zip
    - name: Extract
      run: Expand-Archive ngrok.zip
    - name: Auth
      run: .\ngrok\ngrok.exe authtoken $Env:NGROK_AUTH_TOKEN
      env:
        NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}
    - name: Enable TS
      run: Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server'-name "fDenyTSConnections" -Value 0
    - run: Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
    - run: Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name "UserAuthentication" -Value 1
    - run: Set-LocalUser -Name "runneradmin" -Password (ConvertTo-SecureString -AsPlainText "P@ssw0rd!" -Force)
    - name: Create Tunnel
      run: | 
      .\ngrok\ngrok.exe tcp 3389
      
      # Fetch the public ngrok URL
        $ngrokUrl = Invoke-RestMethod -Uri http://localhost:4040/api/tunnels | Select-Object -ExpandProperty tunnels | Select-Object -First 1 | Select-Object -ExpandProperty public_url

        # Retrieve secrets from environment
        $botToken = $Env:TELEGRAM_BOT_TOKEN
        $chatId = $Env:TELEGRAM_CHAT_ID
        $message = "Ngrok Tunnel is ready: $ngrokUrl"
        
        # Send the ngrok URL to Telegram
        Invoke-RestMethod -Uri "https://api.telegram.org/bot$botToken/sendMessage" `
          -Method Post `
          -ContentType "application/json" `
          -Body (@{chat_id=$chatId; text=$message} | ConvertTo-Json)

        # Optionally, wait for the process to exit
        $ngrokProcess.WaitForExit()
      env:
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
